import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import ADMIN_IDS
from models import Task, TaskType, TaskStatus
from database import Database
from keyboards import (
    get_edit_menu_keyboard, get_main_keyboard, get_task_type_keyboard, get_task_action_keyboard,
    get_tasks_list_keyboard, get_cancel_keyboard, get_confirm_keyboard
)

router = Router()
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class TaskStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_type = State()
    
    edit_title = State()
    edit_description = State()
    edit_type = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–æ–≤
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üòø –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    partner_id = None
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    existing_partner = db.get_partner_id(user_id)
    if existing_partner:
        partner_id = existing_partner
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π –∏–∑ –ø–∞—Ä—ã, —Ç–æ –¥–ª—è –Ω–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä - —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω
        for admin_id in ADMIN_IDS:
            if admin_id != user_id:
                partner_id = admin_id
                break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
    db.add_user(user_id, partner_id)
    
    # –í–∞–∂–Ω–æ! –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å - —á—Ç–æ–±—ã –ø–∞—Ä—Ç–Ω–µ—Ä —Ç–æ–∂–µ –≤–∏–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if partner_id:
        db.add_user(partner_id, user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –ø–∞—Ä—ã."
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–µ–±—è, –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ –¥–ª—è –æ–±–æ–∏—Ö!",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
@router.message(F.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: Message, state: FSMContext):
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TaskStates.waiting_for_title)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(TaskStates.waiting_for_title)
async def process_task_title(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await state.update_data(title=message.text)
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TaskStates.waiting_for_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.message(TaskStates.waiting_for_description)
async def process_task_description(message: Message, state: FSMContext):
    description = message.text
    if description == "-":
        description = ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await state.update_data(description=description)
    
    await message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=get_task_type_keyboard()
    )
    await state.set_state(TaskStates.waiting_for_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
@router.callback_query(TaskStates.waiting_for_type, F.data.startswith("task_type:"))
async def process_task_type(callback: CallbackQuery, state: FSMContext):
    task_type = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    title = data.get("title")
    description = data.get("description", "")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = Task(
        title=title,
        description=description,
        task_type=TaskType(task_type),
        status=TaskStatus.ACTIVE,
        created_by=callback.from_user.id
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    task_id = db.add_task(task)
    task.id = task_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    await callback.message.edit_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üë• –¢–∏–ø: {get_task_type_text(TaskType(task_type))}"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–µ–≥–æ –∏–ª–∏ –¥–ª—è –æ–±–æ–∏—Ö
    if task.task_type in [TaskType.FOR_PARTNER, TaskType.FOR_BOTH]:
        partner_id = db.get_partner_id(callback.from_user.id)
        if partner_id:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
                await callback.bot.send_message(
                    partner_id,
                    f"üîî –£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞!\n\n"
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                    f"üë• –¢–∏–ø: {get_task_type_text(TaskType(task_type))}"
                )
                await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É: {e}")
                await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await callback.message.answer(
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_keyboard()
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
def get_task_type_text(task_type: TaskType) -> str:
    if task_type == TaskType.FOR_ME:
        return "–î–ª—è —Å–µ–±—è"
    elif task_type == TaskType.FOR_PARTNER:
        return "–î–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
    else:
        return "–î–ª—è –æ–±–æ–∏—Ö"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–¥–∞—á–∏"
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_my_tasks(message: Message):
    user_id = message.from_user.id
    
    my_tasks = db.get_user_tasks(user_id)
    
    if not my_tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    
    await message.answer(
        "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
        reply_markup=get_tasks_list_keyboard(my_tasks, context="my_tasks")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞—á–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
@router.message(F.text == "üîÑ –ó–∞–¥–∞—á–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def show_partner_tasks(message: Message):
    user_id = message.from_user.id
    
    # –ù–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:
    partner_tasks = db.get_partner_tasks(user_id)
    
    if not partner_tasks:
        await message.answer("–£ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    
    await message.answer(
        "üîÑ –ó–∞–¥–∞—á–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=get_tasks_list_keyboard(partner_tasks, context="partner_tasks")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∏–µ –∑–∞–¥–∞—á–∏"
@router.message(F.text == "üë´ –û–±—â–∏–µ –∑–∞–¥–∞—á–∏")
async def show_common_tasks(message: Message):
    user_id = message.from_user.id
    
    # –ù–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –∑–∞–¥–∞—á–∏:
    common_tasks = db.get_common_tasks(user_id)
    
    if not common_tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—â–∏—Ö –∑–∞–¥–∞—á.")
        return
    
    await message.answer(
        "üë´ –û–±—â–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=get_tasks_list_keyboard(common_tasks, context="common_tasks")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("view_task:"))
async def view_task(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    task_id = int(parts[1])
    context = parts[2] if len(parts) > 2 else "my_tasks"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å—Ç–µ–π—Ç
    await state.update_data(task_context=context)
    
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.status == TaskStatus.COMPLETED else "üîÑ –ê–∫—Ç–∏–≤–Ω–∞"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É
    creator_text = "–í—ã" if task.created_by == callback.from_user.id else "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
    task_info = (
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üë• –¢–∏–ø: {get_task_type_text(task.task_type)}\n"
        f"üö¶ –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_text}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}"
    )
    
    await callback.message.edit_text(
        task_info,
        reply_markup=get_task_action_keyboard(task.id, task.status, context)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("task_status:"))
async def change_task_status(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    task_id = int(parts[1])
    new_status = TaskStatus(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–µ–π—Ç–∞
    data = await state.get_data()
    context = data.get("task_context", "my_tasks")
    
    task = db.get_task(task_id)
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    task.status = new_status
    db.update_task(task)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –Ω–µ–º—É
    if task.task_type in [TaskType.FOR_PARTNER, TaskType.FOR_BOTH] and task.created_by == callback.from_user.id:
        partner_id = db.get_partner_id(callback.from_user.id)
        if partner_id:
            try:
                status_text = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ" if task.status == TaskStatus.COMPLETED else "–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ üîÑ"
                await callback.bot.send_message(
                    partner_id,
                    f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏!"
                    f"üìå –ó–∞–¥–∞—á–∞ \"{task.title}\" {status_text}"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status.value}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    task = db.get_task(task_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.status == TaskStatus.COMPLETED else "üîÑ –ê–∫—Ç–∏–≤–Ω–∞"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É
    creator_text = "–í—ã" if task.created_by == callback.from_user.id else "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ
    task_info = (
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üë• –¢–∏–ø: {get_task_type_text(task.task_type)}\n"
        f"üö¶ –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_text}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}"
    )
    
    await callback.message.edit_text(
        task_info,
        reply_markup=get_task_action_keyboard(task.id, task.status, context)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("edit_task:"))
async def edit_task(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç–µ–π—Ç–∞
    data = await state.get_data()
    context = data.get("task_context", "my_tasks")
    
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(task_id=task_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_edit_menu_keyboard(task_id, context)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit:"))
async def edit_task_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ
    data = await state.get_data()
    task_id = data.get("task_id")
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    if field == "title":
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(TaskStates.edit_title)
    
    elif field == "description":
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(TaskStates.edit_description)
    
    elif field == "type":
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {get_task_type_text(task.task_type)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
            reply_markup=get_task_type_keyboard()
        )
        await state.set_state(TaskStates.edit_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.message(TaskStates.edit_title)
async def process_edit_title(message: Message, state: FSMContext):
    new_title = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ
    data = await state.get_data()
    task_id = data.get("task_id")
    task = db.get_task(task_id)
    
    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task.title = new_title
    db.update_task(task)
    
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    await message.answer(
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üë• –¢–∏–ø: {get_task_type_text(task.task_type)}\n"
        f"üö¶ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.status == TaskStatus.COMPLETED else 'üîÑ –ê–∫—Ç–∏–≤–Ω–∞'}",
        reply_markup=get_task_action_keyboard(task.id, task.status)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(TaskStates.edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    new_description = message.text
    if new_description == "-":
        new_description = ""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ
    data = await state.get_data()
    task_id = data.get("task_id")
    task = db.get_task(task_id)
    
    if not task:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task.description = new_description
    db.update_task(task)
    
    await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    await message.answer(
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üë• –¢–∏–ø: {get_task_type_text(task.task_type)}\n"
        f"üö¶ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.status == TaskStatus.COMPLETED else 'üîÑ –ê–∫—Ç–∏–≤–Ω–∞'}",
        reply_markup=get_task_action_keyboard(task.id, task.status)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
@router.callback_query(TaskStates.edit_type, F.data.startswith("task_type:"))
async def process_edit_type(callback: CallbackQuery, state: FSMContext):
    new_type = TaskType(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ
    data = await state.get_data()
    task_id = data.get("task_id")
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
    task.task_type = new_type
    db.update_task(task)
    
    await callback.answer(f"‚úÖ –¢–∏–ø –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    await callback.message.edit_text(
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üë• –¢–∏–ø: {get_task_type_text(task.task_type)}\n"
        f"üö¶ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.status == TaskStatus.COMPLETED else 'üîÑ –ê–∫—Ç–∏–≤–Ω–∞'}",
        reply_markup=get_task_action_keyboard(task.id, task.status)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("delete_task:"))
async def confirm_delete_task(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    task = db.get_task(task_id)
    
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}",
        reply_markup=get_confirm_keyboard("delete", task_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("confirm_delete:"))
async def delete_task(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    success = db.delete_task(task_id)
    
    if success:
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        await callback.message.edit_text("–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await callback.message.answer(
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_main_keyboard()
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á
@router.callback_query(F.data.startswith("page:"))
async def change_page(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    page = int(parts[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    context = data.get("task_context", "my_tasks")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = callback.from_user.id
    
    if context == "my_tasks":
        filtered_tasks = db.get_user_tasks(user_id)
    elif context == "partner_tasks":
        filtered_tasks = db.get_partner_tasks(user_id)
    elif context == "common_tasks":
        filtered_tasks = db.get_common_tasks(user_id)
    else:
        filtered_tasks = db.get_tasks(user_id)
    
    await callback.message.edit_reply_markup(
        reply_markup=get_tasks_list_keyboard(filtered_tasks, page, context=context)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=None
    )
    await callback.message.answer(
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º"
@router.callback_query(F.data.startswith("back_to_tasks"))
async def back_to_tasks(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–ª–±—ç–∫–∞ –∏–ª–∏ –∏–∑ —Å—Ç–µ–π—Ç–∞
    parts = callback.data.split(":")
    context = parts[1] if len(parts) > 1 else "my_tasks"
    
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å—Ç–µ–π—Ç–µ
    await state.update_data(task_context=context)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_id = callback.from_user.id
    
    if context == "my_tasks":
        filtered_tasks = db.get_user_tasks(user_id)
        title = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:"
    elif context == "partner_tasks":
        filtered_tasks = db.get_partner_tasks(user_id)
        title = "üîÑ –ó–∞–¥–∞—á–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:"
    elif context == "common_tasks":
        filtered_tasks = db.get_common_tasks(user_id)
        title = "üë´ –û–±—â–∏–µ –∑–∞–¥–∞—á–∏:"
    else:
        filtered_tasks = db.get_tasks(user_id)
        title = "üìã –í—Å–µ –∑–∞–¥–∞—á–∏:"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await callback.message.edit_text(
        title,
        reply_markup=get_tasks_list_keyboard(filtered_tasks, context=context)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=None
    )
    await callback.message.answer(
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä—ã</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏ –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è —Å–µ–±—è, –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ –æ–±–æ–∏—Ö\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á (–∞–∫—Ç–∏–≤–Ω—ã–µ/–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞."
    )
    
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())